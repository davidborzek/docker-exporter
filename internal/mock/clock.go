// Code generated by MockGen. DO NOT EDIT.
// Source: clock.go
//
// Generated by this command:
//
//	mockgen -destination=../mock/clock.go -package mock -typed -source clock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *MockClockNowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
	return &MockClockNowCall{Call: call}
}

// MockClockNowCall wrap *gomock.Call
type MockClockNowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClockNowCall) Return(arg0 time.Time) *MockClockNowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClockNowCall) Do(f func() time.Time) *MockClockNowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClockNowCall) DoAndReturn(f func() time.Time) *MockClockNowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Parse mocks base method.
func (m *MockClock) Parse(layout, value string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", layout, value)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockClockMockRecorder) Parse(layout, value any) *MockClockParseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockClock)(nil).Parse), layout, value)
	return &MockClockParseCall{Call: call}
}

// MockClockParseCall wrap *gomock.Call
type MockClockParseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClockParseCall) Return(arg0 time.Time, arg1 error) *MockClockParseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClockParseCall) Do(f func(string, string) (time.Time, error)) *MockClockParseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClockParseCall) DoAndReturn(f func(string, string) (time.Time, error)) *MockClockParseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Since mocks base method.
func (m *MockClock) Since(t time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Since", t)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since.
func (mr *MockClockMockRecorder) Since(t any) *MockClockSinceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockClock)(nil).Since), t)
	return &MockClockSinceCall{Call: call}
}

// MockClockSinceCall wrap *gomock.Call
type MockClockSinceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClockSinceCall) Return(arg0 time.Duration) *MockClockSinceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClockSinceCall) Do(f func(time.Time) time.Duration) *MockClockSinceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClockSinceCall) DoAndReturn(f func(time.Time) time.Duration) *MockClockSinceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
